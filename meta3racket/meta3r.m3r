output = '<' <'(output'> $('*' <' buffer'> / .STRING <' '*>) '>' <')'>;

exp_atom = .ID <'(e-'*')'>
	/ .STRING <'(test '*')'>
	/ '.ID' <'(read-id)'>
	/ '.NUMBER' <'(read-num)'>
	/ '.STRING' <'(read-str)'>
	/ '(' expression ')'
	/ '.EMPTY' <'#t'>
	/ '$' <'(while-ok (lambda () '> exp_atom <'))'>;

exp_body = <' (if (not (and\n\t\t\t'>
	$(output / exp_atom <'\n\t\t\t'>) <')) (err) #t)'>;

exp_option =  output exp_body
	/ <'(if '>exp_atom exp_body <' #f)'> ;

expression = <'(cond\n\t\t['> exp_option <']'>
		$('/' <'\n\t\t['> exp_option <']'>) <'\n\t\t[else #f])'>;

statement = .ID <'\n(define (e-'*')\n\t'> '=' expression ';' <')\n'>;

compiler = <'#lang racket\n(require \"meta.rkt\")\n'>
	$statement '.SYNTAX' .ID
	<'\n(unless (e-'*') \"\\nfailed\")'>;

.SYNTAX compiler
