	ADR PROGRAM
OUTA
	TST '*'
	BF L1
	CL 'push(in_buf)'
	OUT
L1
	BT L2
	SR
	BF L3
	CL 'push('
	CI
	CL ')'
	OUT
L3
L2
	R
OUTPUT
	TST '.out'
	BF L4
	TST '('
	BE
L5
	CLL OUTA
	BT L5
	SET
	BE
	TST ')'
	BE
	CL 'out()'
	OUT
L4
	BT L6
	TST '{'
	BF L7
	CL 'indent+=1'
	OUT
L7
	BT L6
	TST '}'
	BF L8
	CL 'indent-=1'
	OUT
L8
L6
	R
EX3
	ID
	BF L9
	CL 'e_'
	CI
	CL '()'
	OUT
L9
	BT L10
	SR
	BF L11
	CL 'test('
	CI
	CL ')'
	OUT
L11
	BT L10
	TST '.ID'
	BF L12
	CL 'read("id")'
	OUT
L12
	BT L10
	TST '.NUMBER'
	BF L13
	CL 'read("num")'
	OUT
L13
	BT L10
	TST '.STRING'
	BF L14
	CL 'read("str")'
	OUT
L14
	BT L10
	TST '('
	BF L15
	CLL EX1
	BE
	TST ')'
	BE
L15
	BT L10
	TST '.EMPTY'
	BF L16
	CL 'flag = 1'
	OUT
L16
	BT L10
	TST '$'
	BF L17
	CL 'flag = 1'
	OUT
	CL 'while flag:'
	OUT
	LB
	CL '{'
	OUT
	CLL EX3
	BE
	LB
	CL '}'
	OUT
	CL 'flag = 1'
	OUT
L17
L10
	R
EX2
	CLL EX3
	BF L18
	CL 'if flag:'
	OUT
L18
	BT L19
	CLL OUTPUT
	BF L20
	CL 'if True:'
	OUT
L20
L19
	BF L21
	LB
	CL '{'
	OUT
	CL 'pass'
	OUT
L22
	CLL EX3
	BF L23
	CL 'check_err()'
	OUT
L23
	BT L24
	CLL OUTPUT
	BF L25
L25
L24
	BT L22
	SET
	BE
	LB
	CL '}'
	OUT
L21
L26
	R
EX1
	CL 'while True:'
	OUT
	LB
	CL '{'
	OUT
	CLL EX2
	BE
L27
	TST '/'
	BF L28
	CL 'if flag: break'
	OUT
	CLL EX2
	BE
L28
L29
	BT L27
	SET
	BE
	CL 'break'
	OUT
	LB
	CL '}'
	OUT
L30
L31
	R
STATEMENT
	ID
	BF L32
	CL 'def e_'
	CI
	CL '():'
	OUT
	TST '='
	BE
	LB
	CL '{'
	OUT
	CL 'global flag, indent'
	OUT
	CLL EX1
	BE
	LB
	CL '}'
	OUT
	CL ''
	OUT
	TST ';'
	BE
L32
L33
	R
PROGRAM
	CL 'import string
import sys
indent = 0
out_buf = ""
in_buf = ""
flag = 1
def push(x): global out_buf; out_buf += x
def escape(x):
	return x.replace(chr(39), chr(39)*3) if chr(39) in x and chr(10) in x else x
def out(): global out_buf; print(chr(9)*indent + out_buf); out_buf=""
def check_err():
	if not flag: raise Exception("ERROR"); sys.exit(1)
def skip():
	if len(input.peek(1)[:1]):
		while input.peek(1)[:1] in bytes([9,10,32]): input.seek(1, 1)
def read(t):
	global in_buf, flag;
	skip(); n = input.peek(1)[:1].decode()
	if not len(n) or not((t=="id" and n in string.printable[10:62])
		or (t=="str" and ord(n) == 39)
		or (t=="num" and n in string.printable[:10])):
		flag = 0; return
	in_buf = n; input.seek(1, 1); flag = 1
	while n := input.peek(1)[:1].decode():
		if not ((t=="id" and n in string.printable[:62])
			or (t=="str" and ord(n) != 39)
			or (t=="num" and n in string.printable[:10])): break
		in_buf += n; input.seek(1, 1)
	if t=="str": in_buf = escape(in_buf + n); input.seek(1, 1)
def test(x):
	skip(); global flag
	if input.peek(len(x))[:len(x)] == x.encode():
		input.seek(len(x), 1); flag = 1
	else: flag = 0
'
	OUT
L34
	CLL STATEMENT
	BT L34
	SET
	BE
	TST '.SYNTAX'
	BE
	ID
	BE
	CL '
if len(sys.argv) < 2:
	print(f"Usage: {sys.argv[0]} <program_file>")
else:
	input = open(sys.argv[1], "rb")
	e_'
	CI
	CL '()'
	OUT
L35
L36
	R
	END
