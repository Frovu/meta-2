.SYNTAX PROGRAM

OUTA = '*' .OUT('push(in_buf)')
	/ .STRING .OUT('push('*')').,

OUTPUT = '.out' '(' $OUTA ')' .OUT('out()')
	/ '{' .OUT('indent+=1')
	/ '}' .OUT('indent-=1').,

EX3 = .ID .OUT('e_'*'()')
	/ .STRING .OUT('test('*')')
	/ '.ID' .OUT('read("id")')
	/ '.NUMBER' .OUT('read("num")')
	/ '.STRING' .OUT('read("str")')
	/ '(' EX1 ')'
	/ '.EMPTY' .OUT('flag = 1')
	/ '$' .OUT('flag = 1') .OUT('while flag:')
		.LABEL '{' EX3  .LABEL '}' .OUT('flag = 1').,

EX2 = (EX3 .OUT('if flag:') / OUTPUT .OUT('if True:'))
	.LABEL '{' .OUT('pass') $(EX3 .OUT('check_err()') / OUTPUT) .LABEL '}'.,

EX1 = .OUT('while True:') .LABEL '{' EX2 $('/' .OUT('if flag: break') EX2 )
.OUT('break') .LABEL '}' .,

STATEMENT = .ID .OUT('def e_' * '():') '='
	.LABEL '{' .OUT('global flag, indent') EX1 .LABEL '}' .OUT('')  ';'.,

PROGRAM = .OUT('import string
import sys
indent = 0
out_buf = ""
in_buf = ""
flag = 1
def push(x): global out_buf; out_buf += x
def escape(x):
	return x.replace(chr(39), chr(39)*3) if chr(39) in x and chr(10) in x else x
def out(): global out_buf; print(chr(9)*indent + out_buf); out_buf=""
def check_err():
	if not flag: raise Exception("ERROR"); sys.exit(1)
def skip():
	if len(input.peek(1)[:1]):
		while input.peek(1)[:1] in bytes([9,10,32]): input.seek(1, 1)
def read(t):
	global in_buf, flag;
	skip(); n = input.peek(1)[:1].decode()
	if not len(n) or not((t=="id" and n in string.printable[10:62])
		or (t=="str" and ord(n) == 39)
		or (t=="num" and n in string.printable[:10])):
		flag = 0; return
	in_buf = n; input.seek(1, 1); flag = 1
	while n := input.peek(1)[:1].decode():
		if not ((t=="id" and n in string.printable[:62])
			or (t=="str" and ord(n) != 39)
			or (t=="num" and n in string.printable[:10])): break
		in_buf += n; input.seek(1, 1)
	if t=="str": in_buf = escape(in_buf + n); input.seek(1, 1)
def test(x):
	skip(); global flag
	if input.peek(len(x))[:len(x)] == x.encode():
		input.seek(len(x), 1); flag = 1
	else: flag = 0
') $ STATEMENT '.SYNTAX' .ID .OUT('
if len(sys.argv) < 2:
	print(f"Usage: {sys.argv[0]} <program_file>")
else:
	input = open(sys.argv[1], "rb")
	e_' * '()').,

.END
